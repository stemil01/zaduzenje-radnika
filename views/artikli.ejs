<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.min.css">
        <link rel="stylesheet" href="../node_modules/bootstrap-select/dist/css/bootstrap-select.min.css">
        <!-- <script defer>require('popper.js')</script> -->
        <script defer>require('bootstrap')</script>
        <script defer>require('bootstrap-select')</script>
        <%- include('partials/head') %>
    </head>
    <body>
        <%- include('partials/navigation') %>

        <input id="searchInput" placeholder="Pretrazi po...">
        <select id="searchBy">
            <option value="SifraArtikla">Sifri Artikla</option>
            <option value="Naziv" selected>Nazivu</option>
            <option value="JedinicaMere">Jedinici mere</option>
            <option value="Cena">Ceni</option>
        </select>

        <table class="content-table" id="listaArtikala"></table>

        <div class="pagination">
            <div class="firstPage">Prva</div>
            <div class="prevPage">Prethodna</div>
            <div class="page-num" id="page1"></div>
            <div class="page-num" id="page2"></div>
            <div class="page-num" id="page3"></div>
            <div class="nextPage">Sledeca</div>
            <div class="lastPage">Poslednja</div>
        </div>

        <button type="button" onclick="openWin_Artikl()">Dodaj artkl</button>
        <form id="editForm"></form>

        <script src="../src/renderer.js"></script>
        <script>
            const { ipcRenderer } = require('electron');
            const { dialog } = require('electron').remote;
            const $ = require('jquery');

            let rowsArtikl;
            let descSifraArtikla = true, descNaziv = true, descJedinicaMere = true, descCena = true;
            let tableContent, currentPage, numberOfPages;

            ipcRenderer.send("list-Artikl");
            ipcRenderer.once("rows-Artikl", (evt, rows) => {
                rowsArtikl = rows.slice();
                tableContent = rowsArtikl.slice();
                currentPage = 1;
                numberOfPages = Math.ceil(tableContent.length / pageSize);
                createTable("listaArtikala", rowsArtikl, true, currentPage);
                updatePagination(currentPage, numberOfPages);
            });

            function openWin_Artikl() {
                ipcRenderer.send("open-insert-window", 'views/popups/insertArtikl.html');
            }

            $(document).ready(function() {
                $(document).on("click", ".deleteRow", debounce(() => {
                    let options = {
                        buttons: ["Da", "Ne"],
                        message: "Da ste sigurni da zelite da obrisete?"
                    };
                    let response = dialog.showMessageBoxSync(options);
                    if (response == 0) {
                        var $row = $(this).closest("tr");
                        let ID_Artikla = $row.find("td:first").text();

                        ipcRenderer.send("delete-Artikl", ID_Artikla);
                        ipcRenderer.once("deletedRow", () => {
                            let rowsIndex = rowsArtikl.findIndex((element) => {
                                return element.ID_Artikla == ID_Artikla;
                            });
                            rowsArtikl.splice(rowsIndex, 1);
                            let tableIndex = tableContent.findIndex((element) => {
                                return element.ID_Artikla == ID_Artikla;
                            });
                            tableContent.splice(tableIndex, 1);

                            numberOfPages = Math.ceil(tableContent.length / pageSize);
                            if (currentPage > numberOfPages) currentPage--;
                            createTable("listaArtikala", tableContent, true, currentPage);
                            updatePagination(currentPage, numberOfPages);
                        });
                    }
                }, 350));

                $(document).on("click", ".editRow", function() {
                    var $row = $(this).closest("tr");
                    var $values = $row.find("td");
                    var prevHTML = $row.html();

                    let ID_Artikla = $values.eq(0).text();
                    let SifraArtikla = $values.eq(1).text();
                    let Naziv = $values.eq(2).text();
                    let JedinicaMere = $values.eq(3).text();
                    let Cena = $values.eq(4).text();

                    let rowHMTL =  `<td style="display: none;" id="ID_Artikla">${ID_Artikla}</td>
                                    <td>
                                        <input type="number" name="SifraArtikla" id="SifraArtikla" value="${SifraArtikla}" required form="editForm">
                                    </td>
                                    <td>
                                        <input type="text" name="Naziv" id="Naziv" value="${Naziv}" required form="editForm">
                                    </td>
                                    <td>
                                        <input type="text" name="JedinicaMere" id="JedinicaMere" value="${JedinicaMere}" required form="editForm">
                                    </td>
                                    <td>
                                        <input type="number" step="any" name="Cena" id="Cena" value="${Cena}" required form="editForm">
                                    </td>
                                    <td>
                                        <button type="button" id="confirmEdit" form="editForm">Potvrdi</button>
                                    </td>
                                    <td>
                                        <button type="button" id="cancelEdit" onclick="cancelEdit(this, '${ID_Artikla}', '${SifraArtikla}', '${Naziv}', '${JedinicaMere}', '${Cena}')">Ponisti</button>
                                    </td>`;

                    $row.html(rowHMTL);
                });
                
                $(document).on("click", "#confirmEdit", function() {
                    var $row = $(this).closest("tr");

                    let ID_Artikla = parseInt($row.find("#ID_Artikla").html());
                    let SifraArtikla = parseInt($row.find("#SifraArtikla").val());
                    let Naziv = $row.find("#Naziv").val();
                    let JedinicaMere = $row.find("#JedinicaMere").val();
                    let Cena = parseFloat($row.find("#Cena").val());

                    if (SifraArtikla == '' || Naziv == '' || JedinicaMere == '' || Cena == '') {
                        ipcRenderer.send("error", 'Greska pri unosu podataka', 'Vrednosti ne mogu da budu prazne');
                    } else {
                        ipcRenderer.send("edit-Artikl", ID_Artikla, SifraArtikla, Naziv, JedinicaMere, Cena);
                        ipcRenderer.once("edited-Artikl", () => {
                            let rowHMTL =  `<td class="value" style="display: none;">${ID_Artikla}</td>
                                            <td class="value">${SifraArtikla}</td>
                                            <td class="value">${Naziv}</td>
                                            <td class="value">${JedinicaMere}</td>
                                            <td class="value">${Cena}</td>
                                            <td><button type="button" class="deleteRow">X</button></td>
                                            <td><button type="button" class="editRow">E</button></td>`;

                            $row.html(rowHMTL);

                            let rowsIndex = rowsArtikl.findIndex((element) => {
                                return element.ID_Artikla == ID_Artikla;
                            });
                            rowsArtikl[rowsIndex] = {
                                ID_Artikla: ID_Artikla,
                                SifraArtikla: SifraArtikla,
                                Naziv: Naziv,
                                JedinicaMere: JedinicaMere,
                                Cena: Cena
                            };
                            let tableIndex = tableContent.findIndex((element) => {
                                return element.ID_Artikla == ID_Artikla;
                            });
                            tableContent[tableIndex] = {
                                ID_Artikla: ID_Artikla,
                                SifraArtikla: SifraArtikla,
                                Naziv: Naziv,
                                JedinicaMere: JedinicaMere,
                                Cena: Cena
                            };
                        });
                    }
                });

                $(document).on("click", ".headerCell", function() {
                    var attribute = $(this).text();
                    let desc;
                    let key = $("#searchInput").val();
                    let searchBy = $("#searchBy").val();
                    switch (attribute) {
                        case "SifraArtikla":
                            desc = descSifraArtikla;
                            descSifraArtikla = !descSifraArtikla;
                            break;
                        case "Naziv":
                            desc = descNaziv;
                            descNaziv = !descNaziv;
                            break;
                        case "JedinicaMere":
                            desc = descJedinicaMere;
                            descJedinicaMere = !descJedinicaMere;
                            break;
                        case "Cena":
                            desc = descCena;
                            descCena = !descCena;
                            break;
                        default:
                            console.log('Ne poklapa se ime kolone');
                            break;
                    }

                    currentPage = 1;
                    tableContent = filterTable(rowsArtikl, attribute, desc, key, searchBy);
                    numberOfPages = Math.ceil(tableContent.length / pageSize);
                    createTable("listaArtikala", tableContent, true, currentPage);
                    updatePagination(currentPage, numberOfPages);
                });

                $(document).on("change keyup paste", "#searchInput", debounce(() => {
                    let key = $("#searchInput").val();
                    let searchBy = $("#searchBy").val();

                    currentPage = 1;
                    tableContent = searchTable(rowsArtikl, key, searchBy);
                    numberOfPages = Math.ceil(tableContent.length / pageSize);
                    createTable("listaArtikala", tableContent, true, currentPage);
                    updatePagination(currentPage, numberOfPages);

                }, 350));

                $(document).on("change", "#searchBy", function() {
                    let key = $("#searchInput").val();
                    let searchBy = $("#searchBy").val();

                    currentPage = 1;
                    tableContent = searchTable(rowsArtikl, key, searchBy);
                    numberOfPages = Math.ceil(tableContent / pageSize);
                    createTable("listaArtikala", tableContent, true, currentPage);
                    updatePagination(currentPage, numberOfPages);
                });

                // pagination
                $(document).on("click", ".page-num", function() {
                    currentPage = parseInt($(this).text());
                    createTable("listaArtikala", tableContent, true, currentPage);
                    updatePagination(currentPage, numberOfPages);
                });

                $(document).on("click", ".prevPage", function() {
                    currentPage--;
                    createTable("listaArtikala", tableContent, true, currentPage);
                    updatePagination(currentPage, numberOfPages);
                });
                
                $(document).on("click", ".nextPage", function() {
                    currentPage++;
                    createTable("listaArtikala", tableContent, true, currentPage);
                    updatePagination(currentPage, numberOfPages);
                });

                $(document).on("click", ".firstPage", function() {
                    currentPage = 1;
                    createTable("listaArtikala", tableContent, true, currentPage);
                    updatePagination(currentPage, numberOfPages);
                });

                $(document).on("click", ".lastPage", function() {
                    currentPage = Math.max(numberOfPages, 1);
                    createTable("listaArtikala", tableContent, true, currentPage);
                    updatePagination(currentPage, numberOfPages);
                });
            });

            function cancelEdit(btn, ID_Artikla, SifraArtikla, Naziv, JedinicaMere, Cena) {
                let rowHMTL =  `<td class="value" style="display: none;">${ID_Artikla}</td>
                                <td class="value">${SifraArtikla}</td>
                                <td class="value">${Naziv}</td>
                                <td class="value">${JedinicaMere}</td>
                                <td class="value">${Cena}</td>
                                <td><button type="button" class="deleteRow">X</button></td>
                                <td><button type="button" class="editRow">E</button></td>`;

                $(btn).closest("tr").html(rowHMTL);
            }
        </script>
    </body>
    <footer>
        <%- include('partials/footer') %>
    </footer>
</html>
